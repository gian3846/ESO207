#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int parent;
    int rank;
} UnionFind;

typedef struct {
    int from;
    int to;
    int weight;
} Edge;

void initialize(UnionFind *uf, int size) {
    for (int i = 0; i < size; i++) {
        uf[i].parent = i;
        uf[i].rank = 0;
    }
}

int find(UnionFind *uf, int i) {
    if (uf[i].parent != i)
        uf[i].parent = find(uf, uf[i].parent);
    return uf[i].parent;
}

void unionSets(UnionFind *uf, int x, int y) {
    int rootX = find(uf, x);
    int rootY = find(uf, y);
    if (rootX != rootY) {
        if (uf[rootX].rank > uf[rootY].rank)
            uf[rootY].parent = rootX;
        else if (uf[rootX].rank < uf[rootY].rank)
            uf[rootX].parent = rootY;
        else {
            uf[rootY].parent = rootX;
            uf[rootX].rank++;
        }
    }
}

int cmp(const void *a, const void *b) {
    Edge *edgeA = (Edge *)a;
    Edge *edgeB = (Edge *)b;
    return edgeA->weight - edgeB->weight;
}

int main() {
    int flag;
    scanf("%d", &flag);
    if (flag == 0) {
        int n, q;
        scanf("%d %d", &n, &q);
        UnionFind *uf = (UnionFind *)malloc(n * sizeof(UnionFind));
        initialize(uf, n);
        for (int i = 0; i < q; i++) {
            int type, a, b;
            scanf("%d %d %d", &type, &a, &b);
            if (type == 0)
                unionSets(uf, a - 1, b - 1);
            else if (type == 1)
                printf("%d ", find(uf, a - 1) == find(uf, b - 1) ? 1 : 0);
        }
        free(uf);
    } else if (flag == 1) {
        int n;
        scanf("%d", &n);
        Edge *edges = (Edge *)malloc(n * n * sizeof(Edge)); // Assume max n*n edges
        int edgeCount = 0;
        for (int i = 0; i < n; i++) {
            while (1) {
                int j, w;
                scanf("%d", &j);
                if (j == -1) break;
                scanf("%d", &w);
                edges[edgeCount].from = i;
                edges[edgeCount].to = j - 1;
                edges[edgeCount].weight = w;
                edgeCount++;
            }
        }
        qsort(edges, edgeCount, sizeof(Edge), cmp);
        UnionFind *uf = (UnionFind *)malloc(n * sizeof(UnionFind));
        initialize(uf, n);
        int totalWeight = 0;
        for (int i = 0; i < edgeCount; i++) {
            if (find(uf, edges[i].from) != find(uf, edges[i].to)) {
                unionSets(uf, edges[i].from, edges[i].to);
                totalWeight += edges[i].weight;
            }
        }
        printf("%d", totalWeight);
        free(edges);
        free(uf);
    }
    return 0;
}
